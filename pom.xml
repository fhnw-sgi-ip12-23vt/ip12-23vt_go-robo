<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>groupId</groupId>
    <artifactId>RoboGo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <!-- BUILD PROPERTIES -->
    <build>
        <plugins>

            <!-- CheckStyle PlugIn -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin}</version>
                <executions>
                    <execution>
                        <id>test-compile-verify-style</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${checkstyle.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <excludes>**/util/**/*,*/catalog/components/base/**/*,**/module-info.java,**/test/**</excludes>
                    <configLocation>src/main/config/checks.xml</configLocation>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <violationSeverity>warning</violationSeverity>
                </configuration>

            </plugin>


            <!-- JAVA COMPILER -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <verbose>false</verbose>
                </configuration>
            </plugin>

            <!-- DEFAULT JAR EXECUTABLE CLASS -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>java</executable>
                    <arguments>
                        <argument>--module-path</argument>
                        <argument>${project.build.directory}/distribution</argument>
                        <argument>--module</argument>
                        <argument>${launcher.class}</argument>
                    </arguments>
                </configuration>
            </plugin>
            <!-- Copy runtime dependencies into distribution folder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <excludeTransitive>false</excludeTransitive>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <!--
                            On the Raspberry Pi we use specific JavaFX dependencies, so we exclude them here.
                            -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Build final JAR file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                </configuration>
            </plugin>

            <!-- Javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <additionalOptions>
                        <additionalOption>--module-path</additionalOption>
                        <additionalOption>${project.build.directory}/distribution</additionalOption>
                    </additionalOptions>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven-clean-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven-dependency-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven-install-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${exec-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <properties>
        <junit.jupiter.version>5.10.2</junit.jupiter.version>

        <mainClass>roomba.RoombaInTrouble</mainClass>

        <maven-shade.version>3.2.4</maven-shade.version> <!-- Version des Shade Plugins -->

        <checkstyle.version>10.14.1</checkstyle.version>  <!-- Version des CheckStyle Plugins -->
        <maven-checkstyle-plugin>3.3.1</maven-checkstyle-plugin>

        <!-- The class that will be started, choose one and only one -->

        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.setup.HelloFX</launcher.class> -->
        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.setup.MinimalPi4J</launcher.class> -->
        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.mvc.templateapp.AppStarter</launcher.class> -->
        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.mvc.templatepuiapp.AppStarter</launcher.class> -->
        <launcher.class>RoboGo/roomba.RoombaInTrouble</launcher.class>

        <!-- Setup for the RaspPi -->
        <pi.hostname>pi4j</pi.hostname> <!-- if ping to pi4j not possible replace to ip address and at <pi.ipnumber> remove .local-->
        <pi.ipnumber>${pi.hostname}.local</pi.ipnumber>  <!-- change to concrete ip-number if hostname is not unique in wlan -->
        <pi.port>22</pi.port>
        <pi.username>pi</pi.username>
        <pi.password>pi4j</pi.password>
        <pi.deploydirectory>/home/pi/deploy</pi.deploydirectory>
        <pi.jvmOptions/>

        <!-- If a mouse is attached to Pi use 'true' -->
        <pi.drm.enable.cursor>true</pi.drm.enable.cursor>

        <!-- Java Compiler Version -->
        <java.version>17</java.version>


        <pi4j.version>2.4.0</pi4j.version>


        <!-- Maven Plugin Versions -->
        <maven-clean-plugin.version>3.3.1</maven-clean-plugin.version>
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.6.1</maven-dependency-plugin.version>
        <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
        <maven-install-plugin.version>3.1.1</maven-install-plugin.version>
        <maven-jar-plugin.version>3.3.0</maven-jar-plugin.version>
        <maven-javadoc-plugin.version>3.6.0</maven-javadoc-plugin.version>
        <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
        <maven-surefire-plugin.version>3.2.1</maven-surefire-plugin.version>
        <maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>

        <!-- Maven Properties -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- PROJECT ENCODING PROPERTIES -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Ant Dependencies -->
        <ant-jsch.version>1.10.14</ant-jsch.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.12</version>
        </dependency>

        <dependency>
            <groupId>org.processing</groupId>
            <artifactId>local.processing</artifactId>
            <version>4.0</version>
            <scope>system</scope>
            <systemPath>${pom.basedir}/src/main/resources/lib/core.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>org.crowpi</groupId>
            <artifactId>local.crowpi</artifactId>
            <version>1.0</version>
            <scope>system</scope>
            <systemPath>${pom.basedir}/src/main/resources/lib/crowpi-examples-1.0-SNAPSHOT.jar</systemPath>
        </dependency>

        <!-- Pi4J  -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-core</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli</artifactId>
            <version>4.7.4</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-raspberrypi</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-pigpio</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-linuxfs</artifactId>
            <version>${pi4j.version}</version>
        </dependency>

        <!-- Pi4J Mock Platform -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-mock</artifactId>
            <version>${pi4j.version}</version>
            <!-- <scope>test</scope> -->
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.3.1</version>
        </dependency>
    </dependencies>
    <profiles>
        <profile>
            <id>jfx-remote-run-kiosk</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}"
                                                 trust="true" command="mkdir --parents ${pi.deploydirectory}; rm -f ${pi.deploydirectory}/*.jar"/>

                                        <!-- Transfer distribution folder to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/distribution">
                                                <exclude name="javafx*.jar"/>/>
                                            </fileset>
                                        </scp>

                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="sudo killall -9 java"/>

                                        <!-- copy libraries -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.basedir}/src/main/resources/lib">
                                            </fileset>
                                        </scp>

                                        <!-- copy target -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.basedir}/src/main/resources/lib">
                                            </fileset>
                                        </scp>

                                        <!-- create target dir -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="mkdir /home/pi/target"/>

                                        <!-- copy target dir-->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:/home/pi/target"
                                             port="${pi.port}">
                                            <fileset dir="${project.basedir}/target">
                                            </fileset>
                                        </scp>

                                        <!-- move some target files -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="cp /home/pi/target/classes/files /home/pi/ -r"/>

                                        <!-- execute RoombaInTrouble-->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="DISPLAY=:0 XAUTHORITY=/home/pi/.Xauthority sudo -E java -XX:+UseZGC -Xmx1G   --module-path /opt/javafx-sdk/lib:/home/pi/deploy --add-modules javafx.controls -Dglass.platform=gtk
                                                 --module RoboGo/roomba.RoombaInTrouble"/>

                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>
